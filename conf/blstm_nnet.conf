layer_flag = BLstmLayer; name = blstmlayer1; fw_lstm_cell = 1024; fw_use_peepholes = True; fw_cell_clip = 5.0; fw_num_proj = 512; fw_proj_clip = 1.0; fw_forget_bias = 0.0; fw_keep_prob = 1.0; bw_lstm_cell = 1024; bw_use_peepholes = True; bw_cell_clip = 5.0; bw_num_proj = 512; bw_proj_clip = 1.0; bw_forget_bias = 0.0; bw_keep_prob = 1.0; fw_state_is_tuple = True; fw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); fw_activation = None; fw_dtype = tf.float32; fw_reuse = tf.get_variable_scope().reuse; bw_state_is_tuple = True; bw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); bw_activation = None; bw_dtype = tf.float32; bw_reuse = tf.get_variable_scope().reuse;
layer_flag = BLstmLayer; name = blstmlayer2; fw_lstm_cell = 1024; fw_use_peepholes = True; fw_cell_clip = 5.0; fw_num_proj = 512; fw_proj_clip = 1.0; fw_forget_bias = 0.0; fw_keep_prob = 1.0; bw_lstm_cell = 1024; bw_use_peepholes = True; bw_cell_clip = 5.0; bw_num_proj = 512; bw_proj_clip = 1.0; bw_forget_bias = 0.0; bw_keep_prob = 1.0; fw_state_is_tuple = True; fw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); fw_activation = None; fw_dtype = tf.float32; fw_reuse = tf.get_variable_scope().reuse; bw_state_is_tuple = True; bw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); bw_activation = None; bw_dtype = tf.float32; bw_reuse = tf.get_variable_scope().reuse;
layer_flag = BLstmLayer; name = blstmlayer3; fw_lstm_cell = 1024; fw_use_peepholes = True; fw_cell_clip = 5.0; fw_num_proj = 512; fw_proj_clip = 1.0; fw_forget_bias = 0.0; fw_keep_prob = 1.0; bw_lstm_cell = 1024; bw_use_peepholes = True; bw_cell_clip = 5.0; bw_num_proj = 512; bw_proj_clip = 1.0; bw_forget_bias = 0.0; bw_keep_prob = 1.0; fw_state_is_tuple = True; fw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); fw_activation = None; fw_dtype = tf.float32; fw_reuse = tf.get_variable_scope().reuse; bw_state_is_tuple = True; bw_initializer = tf.contrib.layers.xavier_initializer(tf.float32); bw_activation = None; bw_dtype = tf.float32; bw_reuse = tf.get_variable_scope().reuse;
layer_flag = AffineTransformLayer; name = affine1; input_dim = 1024; output_dim = 4223; dtype = tf.float32; initializer = tf.contrib.layers.xavier_initializer(tf.float32); trainable = True;
